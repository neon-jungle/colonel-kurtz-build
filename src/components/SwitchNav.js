'use strict';

var BlockTypeGroup = require('./BlockTypeGroup');
var Btn = require('./Button');
var React = require('react');
var DOM = require('react-dom');
var groupBy = require('group-by');

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    blockTypes: React.PropTypes.array.isRequired,
    onAdd: React.PropTypes.func.isRequired
  },

  componentDidMount: function componentDidMount() {
    DOM.findDOMNode(this).focus();
  },

  getButton: function getButton(type) {
    var id = type.id;
    var label = type.label;
    var onAdd = this.props.onAdd;

    return {
      name: label,
      type: type,
      component: React.createElement(
        Btn,
        { key: id, className: 'col-switch-btn', onClick: function () {
            return onAdd(type);
          } },
        label
      )
    };
  },

  getGroups: function getGroups(blocks) {
    var groups = groupBy(blocks.filter(function (b) {
      return b.group;
    }), function (type) {
      return type.group;
    });
    var items = [];

    for (var name in groups) {
      items.push({
        name: name,
        type: groups[name][0],
        component: React.createElement(BlockTypeGroup, { key: name, items: groups[name], label: name, onAdd: this.props.onAdd })
      });
    }

    return items;
  },

  render: function render() {
    var blockTypes = this.props.blockTypes;

    var ungrouped = blockTypes.filter(function (b) {
      return !b.group;
    }).map(this.getButton);
    var grouped = this.getGroups(blockTypes);
    var sorted = grouped.concat(ungrouped).sort(function (a, b) {
      return blockTypes.indexOf(a.type) - blockTypes.indexOf(b.type);
    });

    return React.createElement(
      'nav',
      { className: 'col-switch-nav', role: 'navigation' },
      sorted.map(function (s) {
        return s.component;
      })
    );
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1N3aXRjaE5hdi5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtBQUNoRCxJQUFJLEdBQUcsR0FBYyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDeEMsSUFBSSxLQUFLLEdBQVksT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ3JDLElBQUksR0FBRyxHQUFjLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUN6QyxJQUFJLE9BQU8sR0FBVSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7O0FBRXhDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQzs7O0FBRWpDLFdBQVMsRUFBRTtBQUNULGNBQVUsRUFBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVO0FBQzdDLFNBQUssRUFBUSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVO0dBQzdDOztBQUVELG1CQUFpQixFQUFBLDZCQUFHO0FBQ2xCLE9BQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7R0FDOUI7O0FBRUQsV0FBUyxFQUFBLG1CQUFDLElBQUksRUFBRTtRQUNSLEVBQUUsR0FBWSxJQUFJLENBQWxCLEVBQUU7UUFBRSxLQUFLLEdBQUssSUFBSSxDQUFkLEtBQUs7UUFDVCxLQUFLLEdBQUssSUFBSSxDQUFDLEtBQUssQ0FBcEIsS0FBSzs7QUFFWCxXQUFPO0FBQ0wsVUFBSSxFQUFFLEtBQUs7QUFDWCxVQUFJLEVBQUUsSUFBSTtBQUNWLGVBQVMsRUFBRztBQUFDLFdBQUc7VUFBQyxHQUFHLEVBQUcsRUFBRSxBQUFFLEVBQUMsU0FBUyxFQUFDLGdCQUFnQixFQUFDLE9BQU8sRUFBRzttQkFBTSxLQUFLLENBQUMsSUFBSSxDQUFDO1dBQUEsQUFBRTtRQUFHLEtBQUs7T0FBUSxBQUFDO0tBQ3RHLENBQUE7R0FDRjs7QUFFRCxXQUFTLEVBQUEsbUJBQUMsTUFBTSxFQUFFO0FBQ2hCLFFBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQzthQUFJLENBQUMsQ0FBQyxLQUFLO0tBQUEsQ0FBQyxFQUFFLFVBQUEsSUFBSTthQUFJLElBQUksQ0FBQyxLQUFLO0tBQUEsQ0FBQyxDQUFBO0FBQ3JFLFFBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQTs7QUFFZCxTQUFLLElBQUksSUFBSSxJQUFJLE1BQU0sRUFBRTtBQUN2QixXQUFLLENBQUMsSUFBSSxDQUFDO0FBQ1QsWUFBSSxFQUFKLElBQUk7QUFDSixZQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyQixpQkFBUyxFQUFHLG9CQUFDLGNBQWMsSUFBQyxHQUFHLEVBQUcsSUFBSSxBQUFFLEVBQUMsS0FBSyxFQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQUFBRSxFQUFDLEtBQUssRUFBRyxJQUFJLEFBQUUsRUFBQyxLQUFLLEVBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEFBQUUsR0FBRyxBQUFDO09BQzlHLENBQUMsQ0FBQTtLQUNIOztBQUVELFdBQU8sS0FBSyxDQUFBO0dBQ2I7O0FBRUQsUUFBTSxFQUFBLGtCQUFHO1FBQ0QsVUFBVSxHQUFLLElBQUksQ0FBQyxLQUFLLENBQXpCLFVBQVU7O0FBRWhCLFFBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDO2FBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztLQUFBLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3BFLFFBQUksT0FBTyxHQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDMUMsUUFBSSxNQUFNLEdBQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQzdELGFBQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDL0QsQ0FBQyxDQUFBOztBQUVGLFdBQ0U7O1FBQUssU0FBUyxFQUFDLGdCQUFnQixFQUFDLElBQUksRUFBQyxZQUFZO01BQzdDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO2VBQUksQ0FBQyxDQUFDLFNBQVM7T0FBQSxDQUFDO0tBQzFCLENBQ1A7R0FDRjtDQUNGLENBQUMsQ0FBQSIsImZpbGUiOiJTd2l0Y2hOYXYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgQmxvY2tUeXBlR3JvdXAgPSByZXF1aXJlKCcuL0Jsb2NrVHlwZUdyb3VwJylcbmxldCBCdG4gICAgICAgICAgICA9IHJlcXVpcmUoJy4vQnV0dG9uJylcbmxldCBSZWFjdCAgICAgICAgICA9IHJlcXVpcmUoJ3JlYWN0JylcbmxldCBET00gICAgICAgICAgICA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpXG5sZXQgZ3JvdXBCeSAgICAgICAgPSByZXF1aXJlKCdncm91cC1ieScpXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIHByb3BUeXBlczoge1xuICAgIGJsb2NrVHlwZXMgOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICBvbkFkZCAgICAgIDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIERPTS5maW5kRE9NTm9kZSh0aGlzKS5mb2N1cygpXG4gIH0sXG5cbiAgZ2V0QnV0dG9uKHR5cGUpIHtcbiAgICBsZXQgeyBpZCwgbGFiZWwgfSA9IHR5cGVcbiAgICBsZXQgeyBvbkFkZCB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGxhYmVsLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGNvbXBvbmVudDogKDxCdG4ga2V5PXsgaWQgfSBjbGFzc05hbWU9XCJjb2wtc3dpdGNoLWJ0blwiIG9uQ2xpY2s9eyAoKSA9PiBvbkFkZCh0eXBlKSB9PnsgbGFiZWwgfTwvQnRuPilcbiAgICB9XG4gIH0sXG5cbiAgZ2V0R3JvdXBzKGJsb2Nrcykge1xuICAgIGxldCBncm91cHMgPSBncm91cEJ5KGJsb2Nrcy5maWx0ZXIoYiA9PiBiLmdyb3VwKSwgdHlwZSA9PiB0eXBlLmdyb3VwKVxuICAgIGxldCBpdGVtcyA9IFtdXG5cbiAgICBmb3IgKHZhciBuYW1lIGluIGdyb3Vwcykge1xuICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHR5cGU6IGdyb3Vwc1tuYW1lXVswXSxcbiAgICAgICAgY29tcG9uZW50OiAoPEJsb2NrVHlwZUdyb3VwIGtleT17IG5hbWUgfSBpdGVtcz17IGdyb3Vwc1tuYW1lXSB9IGxhYmVsPXsgbmFtZSB9IG9uQWRkPXsgdGhpcy5wcm9wcy5vbkFkZCB9IC8+KVxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbXNcbiAgfSxcblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHsgYmxvY2tUeXBlcyB9ID0gdGhpcy5wcm9wc1xuXG4gICAgbGV0IHVuZ3JvdXBlZCA9IGJsb2NrVHlwZXMuZmlsdGVyKGIgPT4gIWIuZ3JvdXApLm1hcCh0aGlzLmdldEJ1dHRvbilcbiAgICBsZXQgZ3JvdXBlZCAgID0gdGhpcy5nZXRHcm91cHMoYmxvY2tUeXBlcylcbiAgICBsZXQgc29ydGVkICAgID0gZ3JvdXBlZC5jb25jYXQodW5ncm91cGVkKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYmxvY2tUeXBlcy5pbmRleE9mKGEudHlwZSkgLSBibG9ja1R5cGVzLmluZGV4T2YoYi50eXBlKVxuICAgIH0pXG5cbiAgICByZXR1cm4gKFxuICAgICAgPG5hdiBjbGFzc05hbWU9XCJjb2wtc3dpdGNoLW5hdlwiIHJvbGU9XCJuYXZpZ2F0aW9uXCI+XG4gICAgICAgIHsgc29ydGVkLm1hcChzID0+IHMuY29tcG9uZW50KSB9XG4gICAgICA8L25hdj5cbiAgICApXG4gIH1cbn0pXG4iXX0=